global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

### Frontend Configuration
frontend webserver
  bind *:80

  acl url_mytest path_beg /test  
  use_backend test_backend if url_mytest

  default_backend flaskserver

### Backend Configuration
backend flaskserver
  balance roundrobin
  server flasknode1 172.18.0.2:5000 check
  server flasknode2 172.18.0.3:5000 check

backend test_backend
  server flasknode1 172.18.0.2:5000 check



#frontend status
#  bind *:80
#  no log
#  stats uri /stats
#  stats enable
#  stats refresh 10s

frontend stats
    bind *:8404
    #http-request use-service prometheus-exporter if { path /metrics }

    acl url_metrics path_beg /metrics
    use_backend metric_backend if url_metrics

    stats enable
    stats uri /stats
    stats refresh 10s

backend metric_backend
  server metricsport 127.0.0.1:9101 check
